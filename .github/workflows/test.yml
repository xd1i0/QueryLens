name: Test Ingestion Service

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.8.2
        ports:
          - 9200:9200
        options: >-
          --health-cmd="curl -f http://localhost:9200/_cluster/health || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10
        env:
          discovery.type: single-node
          ES_JAVA_OPTS: -Xms512m -Xmx512m
          xpack.security.enabled: false
          xpack.security.http.ssl.enabled: false
          xpack.security.transport.ssl.enabled: false

    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libmagic1 \
            libmagic-dev \
            antiword \
            unrtf \
            poppler-utils \
            tesseract-ocr \
            curl \
            jq

      - name: Install Python dependencies
        run: |
          cd ingestion-service
          python -m pip install --upgrade pip
          pip install -r src/requirements.txt

      - name: Wait for Elasticsearch
        run: |
          for i in {1..30}; do
            if curl -f http://localhost:9200/_cluster/health; then
              echo "Elasticsearch is ready"
              break
            fi
            echo "Waiting for Elasticsearch... ($i/30)"
            sleep 2
          done

      - name: Run unit tests
        run: |
          cd ingestion-service/src
          python -m pytest test_unit.py -v --tb=short
        env:
          ELASTICSEARCH_HOST: http://localhost:9200
          ELASTICSEARCH_INDEX: test_docs
          ELASTICSEARCH_VERIFY_CERTS: false
          JWT_SECRET_KEY: test_secret_key_for_github_actions
          JWT_ALGORITHM: HS256

      - name: Run integration tests
        run: |
          cd ingestion-service/src
          python -m pytest test_integration.py -v --tb=short
        env:
          ELASTICSEARCH_HOST: http://localhost:9200
          ELASTICSEARCH_INDEX: test_docs
          ELASTICSEARCH_VERIFY_CERTS: false
          JWT_SECRET_KEY: test_secret_key_for_github_actions
          JWT_ALGORITHM: HS256

      - name: Start API for E2E tests
        run: |
          cd ingestion-service/src
          python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
          sleep 10
        env:
          ELASTICSEARCH_HOST: http://localhost:9200
          ELASTICSEARCH_INDEX: test_docs_e2e
          ELASTICSEARCH_VERIFY_CERTS: false
          JWT_SECRET_KEY: test_secret_key_for_github_actions
          JWT_ALGORITHM: HS256

      - name: Run end-to-end tests
        run: |
          cd ingestion-service/src
          python -m pytest test_e2e.py -v --tb=short
        env:
          ELASTICSEARCH_HOST: http://localhost:9200
          ELASTICSEARCH_INDEX: test_docs_e2e
          ELASTICSEARCH_VERIFY_CERTS: false
          JWT_SECRET_KEY: test_secret_key_for_github_actions
          JWT_ALGORITHM: HS256

  docker-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Install docker-compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Test Docker build
        run: |
          cd ingestion-service
          docker build -t querylens-ingestion:test .

      - name: Test Docker compose
        run: |
          docker-compose -f docker-compose.yml up -d
          sleep 60
          curl -f http://localhost:8000/ || exit 1
          docker-compose -f docker-compose.yml down

      - name: Run container tests
        run: |
          docker-compose -f docker-compose.yml up -d
          sleep 60
          
          # Test health endpoint (no auth required)
          curl -f http://localhost:8000/ || exit 1
          
          # Get authentication token for testing
          TOKEN=$(curl -s -X POST "http://localhost:8000/auth/token" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "username=testuser&password=testpass123" | jq -r '.access_token')
          
          if [ "$TOKEN" = "null" ] || [ -z "$TOKEN" ]; then
            echo "Failed to get authentication token"
            # Try without authentication (fallback mode)
            echo "Testing in fallback mode without authentication"
            
            # Test document indexing without auth
            curl -X POST "http://localhost:8000/docs/" \
              -H "Content-Type: application/json" \
              -d '{"id":"test-1","title":"Test","content":"Test content"}' || exit 1
            
            # Wait for indexing
            sleep 5
            
            # Test search without auth
            curl -f "http://localhost:8000/search/?q=test" || exit 1
            
            # Test document retrieval without auth
            curl -f "http://localhost:8000/docs/test-1" || exit 1
          else
            echo "Authentication successful, testing with token"
            
            # Test document indexing with auth
            curl -X POST "http://localhost:8000/docs/" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $TOKEN" \
              -d '{"id":"test-1","title":"Test","content":"Test content"}' || exit 1
            
            # Wait for indexing
            sleep 5
            
            # Test search with auth
            curl -f "http://localhost:8000/search/?q=test" \
              -H "Authorization: Bearer $TOKEN" || exit 1
            
            # Test document retrieval with auth
            curl -f "http://localhost:8000/docs/test-1" \
              -H "Authorization: Bearer $TOKEN" || exit 1
          fi
          
          docker-compose -f docker-compose.yml down
